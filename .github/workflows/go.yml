name: Go

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Test
      run: go test -v ./...

    - name: Build artifacts
      if: startsWith( github.ref, 'refs/tags/v' )
      run: ./build/build-artifacts.sh

    - name: Gather release details
      if: startsWith( github.ref, 'refs/tags/v' )
      id: release_details
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VALID_RELEASE=false
        if [ -f "release.md" ] && grep -q "Release $VERSION" release.md; then
          VALID_RELEASE=true
        fi
        RELEASE_NOTES=$(cat release.md || echo release notes unavailable)
        # escape % and linefeeds
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=valid::${VALID_RELEASE}
        echo ::set-output name=release_notes::${RELEASE_NOTES}

    - name: Create release
      if: steps.release_details.outputs.valid == 'true'
      id: release_create
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_details.outputs.version }}
        release_name: ${{ steps.release_details.outputs.version }}
        body: ${{ steps.release_details.outputs.release_notes }}
        draft: false
        prerelease: false

    - name: Upload Release Asset - regctl-linux-amd64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regctl_linux_amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regctl-linux-amd64
        asset_name: regctl-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regctl-linux-arm64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regctl_linux_arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regctl-linux-arm64
        asset_name: regctl-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regctl-darwin-amd64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regctl_darwin_amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regctl-darwin-amd64
        asset_name: regctl-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regctl-windows-amd64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regctl_windows_amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regctl-windows-amd64
        asset_name: regctl-windows-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regsync-linux-amd64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regsync_linux_amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regsync-linux-amd64
        asset_name: regsync-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regsync-linux-arm64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regsync_linux_arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regsync-linux-arm64
        asset_name: regsync-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regbot-linux-amd64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regbot_linux_amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regbot-linux-amd64
        asset_name: regbot-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - regbot-linux-arm64
      if: steps.release_details.outputs.valid == 'true'
      id: release_assets_regbot_linux_arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release_create.outputs.upload_url }}
        asset_path: ./artifacts/regbot-linux-arm64
        asset_name: regbot-linux-arm64
        asset_content_type: application/octet-stream
