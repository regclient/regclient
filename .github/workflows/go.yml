name: Go

on:
  push:
    branches:
      - '**'
      # TODO Delete before merging
      - 'feature/*'
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gover: ["1.20"]

    env:
      RELEASE_GO_VER: "1.20"

    permissions:
      # id-token is used by cosign's OIDC based signing
      # https://blog.chainguard.dev/zero-friction-keyless-signing-with-github-actions/
      id-token: 'write'
      contents: 'write'
      packages: 'write'

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: "Set up Go ${{ matrix.gover }}"
      uses: actions/setup-go@v4
      with:
        go-version: "${{ matrix.gover }}"
        check-latest: true
      id: go

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Verify go fmt
      run: test -z "$(go fmt ./...)"

    - name: Verify go vet
      run: test -z "$(go vet ./...)"

    - name: Test
      run: make test

    - name: Linting
      if: matrix.gover == env.RELEASE_GO_VER
      run: make lint

    - name: Install syft
      if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main'
      uses: anchore/sbom-action/download-syft@v0.14.3
      id: syft
      with:
        syft-version: "v0.86.1"

    - name: Install cosign
      if: ( startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main' ) && matrix.gover == env.RELEASE_GO_VER
      uses: sigstore/cosign-installer@v3.1.1
      with:
        cosign-release: "v2.1.1"

    - name: Gather release details
      if: startsWith( github.ref, 'refs/tags/v' ) && github.repository_owner == 'regclient' && matrix.gover == env.RELEASE_GO_VER
      id: release_details
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VALID_RELEASE=false
        if [ -f "release.md" ] && grep -q "Release $VERSION" release.md; then
          VALID_RELEASE=true
        fi
        RELEASE_NOTES=$(cat release.md || echo release notes unavailable)
        # escape % and linefeeds
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=valid::${VALID_RELEASE}
        echo ::set-output name=release_notes::${RELEASE_NOTES}

    - name: Build and Package artifacts
      # TODO Uncomment before merging
      # if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main'
      uses: goreleaser/goreleaser-action@v4
      with:
        version: v1.16.2
        args: release --release-notes < ${{ steps.release_details.outputs.release_notes }} --skip-publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Package metadata
      # TODO Uncomment before merging
      # if: ( startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main' ) && matrix.gover == env.RELEASE_GO_VER
      run: |
        cd artifacts
        tar -cvzf metadata.tgz *.sig *.pem *.json

    - name: Push release
      if: steps.release_details.outputs.valid == 'true' && matrix.gover == env.RELEASE_GO_VER
      id: release_create
      uses: goreleaser/goreleaser-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        version: v1.16.2
        args: release  --release-notes < ${{ steps.release_details.outputs.release_notes }}

    - name: Save artifacts
      if: github.ref == 'refs/heads/main' && matrix.gover == env.RELEASE_GO_VER
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: ./artifacts/
        retention-days: 30
