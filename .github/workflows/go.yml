name: Go

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gover: ["1.20", "1.21", "1.22"]

    env:
      RELEASE_GO_VER: "1.22"
      # do not automatically upgrade go to a different version: https://go.dev/doc/toolchain
      GOTOOLCHAIN: "local"

    permissions:
      contents: write # needed for pushing release with softprops/actions-gh-release
      id-token: write # needed for OIDC Token signing with cosign

    steps:
    - name: Check out code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: "Set up Go ${{ matrix.gover }}"
      uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
      with:
        go-version: "${{ matrix.gover }}"
        check-latest: true
      id: go

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Verify go fmt
      run: test -z "$(go fmt ./...)"

    - name: Verify go vet
      run: test -z "$(go vet ./...)"

    - name: Test
      run: make test

    - name: Linting
      if: matrix.gover == env.RELEASE_GO_VER
      run: make lint

    - name: Install syft
      if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main'
      uses: anchore/sbom-action/download-syft@d94f46e13c6c62f59525ac9a1e147a99dc0b9bf5 # v0.17.0
      id: syft
      with:
        syft-version: "v1.10.0"

    - name: Build artifacts
      if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main'
      run: make artifacts

    - name: Install cosign
      if: ( startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main' ) && matrix.gover == env.RELEASE_GO_VER
      uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0
      with:
        cosign-release: "v2.3.0"

    - name: Package artifacts
      if: ( startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/heads/main' ) && matrix.gover == env.RELEASE_GO_VER
      run: |
        cd artifacts
        for artifact in \
            regbot-darwin-amd64 \
            regbot-darwin-arm64 \
            regbot-linux-amd64 \
            regbot-linux-arm64 \
            regbot-linux-ppc64le \
            regbot-linux-s390x \
            regbot-windows-amd64.exe \
            regctl-darwin-amd64 \
            regctl-darwin-arm64 \
            regctl-linux-amd64 \
            regctl-linux-arm64 \
            regctl-linux-ppc64le \
            regctl-linux-s390x \
            regctl-windows-amd64.exe \
            regsync-darwin-amd64 \
            regsync-darwin-arm64 \
            regsync-linux-amd64 \
            regsync-linux-arm64 \
            regsync-linux-ppc64le \
            regsync-linux-s390x \
            regsync-windows-amd64.exe \
          ; do
          cosign sign-blob -y --output-signature "${artifact%.exe}.sig" --output-certificate "${artifact%.exe}.pem" "${artifact}"
        done
        tar -cvzf metadata.tgz *.sig *.pem *.json

    - name: Gather release details
      if: startsWith( github.ref, 'refs/tags/v' ) && github.repository_owner == 'regclient' && matrix.gover == env.RELEASE_GO_VER
      id: release_details
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VALID_RELEASE=false
        if [ -f "release.md" ] && grep -q "Release $VERSION" release.md; then
          VALID_RELEASE=true
        fi
        RELEASE_NOTES=$(cat release.md || echo release notes unavailable)
        # escape % and linefeeds
        RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
        RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=valid::${VALID_RELEASE}
        echo ::set-output name=release_notes::${RELEASE_NOTES}

    - name: Create release
      if: steps.release_details.outputs.valid == 'true' && matrix.gover == env.RELEASE_GO_VER
      id: release_create
      uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_details.outputs.version }}
        body: ${{ steps.release_details.outputs.release_notes }}
        draft: false
        prerelease: false
        files: |
          ./artifacts/regbot-darwin-amd64
          ./artifacts/regbot-darwin-arm64
          ./artifacts/regbot-linux-amd64
          ./artifacts/regbot-linux-arm64
          ./artifacts/regbot-linux-ppc64le
          ./artifacts/regbot-linux-s390x
          ./artifacts/regbot-windows-amd64.exe
          ./artifacts/regctl-darwin-amd64
          ./artifacts/regctl-darwin-arm64
          ./artifacts/regctl-linux-amd64
          ./artifacts/regctl-linux-arm64
          ./artifacts/regctl-linux-ppc64le
          ./artifacts/regctl-linux-s390x
          ./artifacts/regctl-windows-amd64.exe
          ./artifacts/regsync-darwin-amd64
          ./artifacts/regsync-darwin-arm64
          ./artifacts/regsync-linux-amd64
          ./artifacts/regsync-linux-arm64
          ./artifacts/regsync-linux-ppc64le
          ./artifacts/regsync-linux-s390x
          ./artifacts/regsync-windows-amd64.exe
          ./artifacts/metadata.tgz

    - name: Save artifacts
      if: github.ref == 'refs/heads/main' && matrix.gover == env.RELEASE_GO_VER
      uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4.3.5
      with:
        name: binaries
        path: ./artifacts/
        retention-days: 30
