ARG REGISTRY=docker.io
ARG ALPINE_VER=3.22.1@sha256:4bcff63911fcb4448bd4fdacec207030997caf25e9bea4045fa6c8c44de311d1
ARG GO_VER=1.25.0-alpine@sha256:f18a072054848d87a8077455f0ac8a25886f2397f88bfdd222d6fafbb5bba440
ARG ECR_HELPER_VER=64b08bad70174a1849fe597f0c59288eb7b7cf91
ARG GCR_HELPER_VER=v2.1.30

FROM ${REGISTRY}/library/golang:${GO_VER} AS golang
RUN apk add --no-cache \
      ca-certificates \
      git \
      make
WORKDIR /src

FROM golang AS build
RUN addgroup -g 1000 appuser \
 && adduser -u 1000 -G appuser -D appuser \
 && mkdir -p /home/appuser/.regctl \
 && chown -R appuser /home/appuser/.regctl
COPY go.* /src/
RUN go mod download
COPY . /src/
RUN make bin/regctl
USER appuser
CMD [ "bin/regctl" ]

FROM golang AS docker-cred-ecr-login
ARG TARGETOS
ARG TARGETARCH
ARG ECR_HELPER_VER
RUN CGO_ENABLED=0 go install -trimpath -ldflags=-buildid= github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@${ECR_HELPER_VER} \
 && ( cp "${GOPATH}/bin/docker-credential-ecr-login" /usr/local/bin/docker-credential-ecr-login \
   || cp "${GOPATH}/bin/${TARGETOS}_${TARGETARCH}/docker-credential-ecr-login" /usr/local/bin/docker-credential-ecr-login )

FROM golang AS docker-cred-gcr
ARG TARGETOS
ARG TARGETARCH
ARG GCR_HELPER_VER
RUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} CGO_ENABLED=0 \
    go install -trimpath -ldflags="-buildid= -s -w" \
      github.com/GoogleCloudPlatform/docker-credential-gcr/v2@${GCR_HELPER_VER} \
 && ( cp "${GOPATH}/bin/docker-credential-gcr" /usr/local/bin/docker-credential-gcr \
   || cp "${GOPATH}/bin/${TARGETOS}_${TARGETARCH}/docker-credential-gcr" /usr/local/bin/docker-credential-gcr )

FROM build AS release-base
USER root
RUN mkdir -p /output/etc/ssl/certs/ /output/home /output/tmp /output/usr/local/bin \
 && cp -a /etc/passwd /etc/group /output/etc/ \
 && cp -a /etc/ssl/certs/ca-certificates.crt /output/etc/ssl/certs/ \
 && cp -a /home/appuser /output/home/ \
 && chmod 1777 /output/tmp

FROM ${REGISTRY}/library/alpine:${ALPINE_VER} AS release-alpine
COPY --from=release-base /output /
COPY --from=docker-cred-ecr-login /usr/local/bin/docker-credential-* /usr/local/bin/
COPY --from=docker-cred-gcr /usr/local/bin/docker-credential-* /usr/local/bin/
COPY --from=build /src/bin/regctl /usr/local/bin/regctl
USER appuser
CMD [ "regctl", "--help" ]

ARG BUILD_DATE
ARG VCS_REF
ARG VCS_VERSION=(devel)
LABEL maintainer="" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.authors="regclient contributors" \
      org.opencontainers.image.url="https://github.com/regclient/regclient" \
      org.opencontainers.image.documentation="https://github.com/regclient/regclient" \
      org.opencontainers.image.source="https://github.com/regclient/regclient" \
      org.opencontainers.image.version=$VCS_VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.vendor="regclient" \
      org.opencontainers.image.licenses="Apache 2.0" \
      org.opencontainers.image.title="regctl" \
      org.opencontainers.image.description="regclient/regctl CLI for managing registry content (alpine)"

FROM scratch AS release-scratch
COPY --from=release-base /output /
COPY --from=build /src/bin/regctl /regctl
USER appuser
ENTRYPOINT [ "/regctl" ]

ARG BUILD_DATE
ARG VCS_REF
ARG VCS_VERSION=(devel)
LABEL maintainer="" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.authors="regclient contributors" \
      org.opencontainers.image.url="https://github.com/regclient/regclient" \
      org.opencontainers.image.documentation="https://github.com/regclient/regclient" \
      org.opencontainers.image.source="https://github.com/regclient/regclient" \
      org.opencontainers.image.version=$VCS_VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.vendor="regclient" \
      org.opencontainers.image.licenses="Apache 2.0" \
      org.opencontainers.image.title="regctl" \
      org.opencontainers.image.description="regclient/regctl CLI for managing registry content (scratch)"
